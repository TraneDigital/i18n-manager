{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../src/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA4B;AAE5B,sDAA6B;AAE7B,SAAS,UAAU,CAAC,OAAe;IAC/B,OAAO,CAAC,KAAK,CAAC,UAAU,OAAO,EAAE,CAAC,CAAA;IAClC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACnB,CAAC;AAED,SAAgB,MAAM,CAAC,GAAQ,EAAE,OAAc,EAAE,KAAU;IACvD,IAAI,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;IAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,EAAG,CAAC,EAAE;QACpC,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;QACpB,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,EAAC;YACd,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;SAChB;QACD,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;KACjB;IAED,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAA;AACtC,CAAC;AAZD,wBAYC;AAED,SAAgB,gBAAgB,CAAI,KAAU;IAC1C,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;AACrC,CAAC;AAFD,4CAEC;AAED,SAAgB,eAAe,CAAC,OAAwB;IACpD,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACpC,UAAU,CAAC,+BAA+B,CAAC,CAAA;KAC9C;IACD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE;QAClC,UAAU,CAAC,qCAAqC,CAAC,CAAA;KACpD;IAED,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;QACvB,UAAU,CAAC,0CAA0C,CAAC,CAAA;KACzD;SAAM,IAAI,CAAC,iBAAO,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE;QAClD,UAAU,CAAC,iCAAiC,CAAC,CAAA;KAChD;IAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACjB,UAAU,CAAC,sCAAsC,CAAC,CAAA;KACrD;SAAM,IAAI,CAAC,iBAAO,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE;QAC5C,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,mDAAmD;YACnD,kBAAkB;YAClB,UAAU,CAAC,0BAA0B,CAAC,CAAA;SACzC;aAAM;YACH,0CAA0C;YAC1C,6BAA6B;YAC7B,iBAAO,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA;SACpD;KACJ;AACL,CAAC;AA3BD,0CA2BC","sourcesContent":["import * as path from \"path\"\r\nimport { CommanderStatic } from \"commander\"\r\nimport shelljs from \"shelljs\"\r\n\r\nfunction throwError(message: string) {\r\n    console.error(`Error: ${message}`)\r\n    process.exit(1)\r\n}\r\n\r\nexport function assign(obj: any, keyPath: any[], value: any): void {\r\n    let lastKeyIndex = keyPath.length - 1\r\n\r\n    for (let i = 0; i < lastKeyIndex; ++ i) {\r\n        let key = keyPath[i]\r\n        if (!(key in obj)){\r\n            obj[key] = {}\r\n        }\r\n        obj = obj[key]\r\n    }\r\n\r\n    obj[keyPath[lastKeyIndex]] = value\r\n}\r\n\r\nexport function removeDuplicates<T>(array: T[]): T[] {\r\n    return Array.from(new Set(array))\r\n}\r\n\r\nexport function programValidate(program: CommanderStatic): void {\r\n    if (!program.import && !program.export) {\r\n        throwError('Import/Export command missing')\r\n    }\r\n    if (program.import && program.export) {\r\n        throwError(\"Can't choose both Import and Export\")\r\n    }\r\n\r\n    if (!program.translations) {\r\n        throwError('Path to translation directory is missing')\r\n    } else if (!shelljs.test('-e', program.translations)) {\r\n        throwError(\"Wrong path to locales directory\")\r\n    }\r\n\r\n    if (!program.output) {\r\n        throwError('Path to output excel file is missing')\r\n    } else if (!shelljs.test('-e', program.output)) {\r\n        if (program.import) {\r\n            // throw an error if we want to import translations\r\n            // from excel file\r\n            throwError(\"Wrong path to excel file\")\r\n        } else {\r\n            // create directories if we want to export\r\n            // translations to excel file\r\n            shelljs.mkdir('-p', path.dirname(program.output))\r\n        }\r\n    }\r\n}\r\n"]}