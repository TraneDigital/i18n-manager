{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,qCAAyB;AACzB,mCAAkC;AAElC,IAAM,SAAS,GAAG,IAAI,CAAC;AAEvB,SAAS,MAAM,CAAC,GAAQ,EAAE,OAAc,EAAE,KAAU;IAChD,IAAI,YAAY,GAAG,OAAO,CAAC,MAAM,GAAC,CAAC,CAAC;IACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,EAAG,CAAC,EAAE;QACpC,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,EAAC;YACd,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;SAChB;QACD,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;KAClB;IACD,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC;AACvC,CAAC;AAED,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAC;AAChC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;KAC/B,IAAI,CAAC,UAAA,QAAQ;IACV,eAAe;IACf,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;QACjC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,eAAe,GAAU,EAAE,CAAC;QAChC,IAAM,YAAY,GAAQ,EAAE,CAAC;QAE7B,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAW;YAClC,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEhC,IAAI,MAAM,KAAK,KAAK,EAAE;gBAClB,eAAe,GAAG,MAAM,CAAC,MAAM,CAAA;aAClC;iBAAM;gBACH,YAAY,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,CAAC,EAAE,GAAG;;oBACtD,IAAI,GAAG,GAAG,CAAC,EAAE;wBACT,OAAO,GAAG,CAAC;qBACd;oBAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;oBAEpC,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;oBAEvC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wBACvB,IAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;wBAChC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;wBACzB,OAAO,GAAG,CAAC;qBACd;oBAED,6BACO,GAAG,gBACL,CAAC,IAAG,KAAK,OACb;gBACL,CAAC,EAAE,EAAE,CAAC,CAAA;aACT;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE1B,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,EAAoB;gBAAnB,YAAI,EAAE,oBAAY;YACrD,EAAE,CAAC,aAAa,CAAC,eAAa,IAAI,SAAI,SAAS,CAAC,IAAM,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AAEN,CAAC,CAAC,CAAC;AAGP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuFG","sourcesContent":["import * as fs from 'fs';\r\nimport { Workbook } from \"exceljs\"\r\n\r\nconst separator = \"::\";\r\n\r\nfunction assign(obj: any, keyPath: any[], value: any) {\r\n    let lastKeyIndex = keyPath.length-1;\r\n    for (let i = 0; i < lastKeyIndex; ++ i) {\r\n        let key = keyPath[i];\r\n        if (!(key in obj)){\r\n            obj[key] = {}\r\n        }\r\n        obj = obj[key];\r\n    }\r\n    obj[keyPath[lastKeyIndex]] = value;\r\n}\r\n\r\nconst workbook = new Workbook();\r\nworkbook.xlsx.readFile('./Bar.xlsx')\r\n    .then(workbook => {\r\n        // use workbook\r\n        workbook.worksheets.forEach(worksheet => {\r\n            console.log(worksheet.name);\r\n            let translationKeys: any[] = [];\r\n            const translations: any = {};\r\n\r\n            worksheet.columns.forEach((column: any) => {\r\n                const header = column.values[1];\r\n\r\n                if (header === \"Key\") {\r\n                    translationKeys = column.values\r\n                } else {\r\n                    translations[header] = translationKeys.reduce((acc, i, idx) => {\r\n                        if (idx < 2) {\r\n                            return acc;\r\n                        }\r\n\r\n                        column.values = column.values || {};\r\n\r\n                        const value = column.values[idx] || \"\";\r\n\r\n                        if (i.includes(separator)) {\r\n                            const keys = i.split(separator);\r\n                            assign(acc, keys, value);\r\n                            return acc;\r\n                        }\r\n\r\n                        return {\r\n                            ...acc,\r\n                            [i]: value,\r\n                        }\r\n                    }, {})\r\n                }\r\n            });\r\n\r\n            console.log(translations);\r\n\r\n            Object.entries(translations).forEach(([lang, translations]) => {\r\n                fs.writeFileSync(`./locales/${lang}/${worksheet.name}`, JSON.stringify(translations, null, \"\\t\") + \"\\n\");\r\n            })\r\n        })\r\n\r\n    });\r\n\r\n\r\n/*\r\nconst workbook = new Workbook();\r\nworkbook.creator = 'Me';\r\nworkbook.created = new Date();\r\n\r\nconst languages = fs.readdirSync(\"./locales\");\r\n\r\nconst files = [...new Set(languages.reduce((acc, lan) => ([\r\n    ...acc,\r\n    ...fs.readdirSync(`./locales/${lan}`),\r\n]), []))].sort();\r\n\r\n\r\nfunction getTransData(data) {\r\n    let langData = {};\r\n\r\n    function setTransData(transObj, translations, lang) {\r\n        Object.entries(translations).forEach(([langKey, trans]) => {\r\n            transObj[langKey] = transObj[langKey] || {};\r\n\r\n            if (trans && typeof trans === \"object\") {\r\n                transObj[langKey].nested = true;\r\n                setTransData(transObj[langKey], trans, lang)\r\n            } else {\r\n                transObj[langKey] = {\r\n                    ...transObj[langKey],\r\n                    [lang]: trans,\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    Object.entries(data).forEach(([lang, translations]) => {\r\n        setTransData(langData, translations, lang);\r\n    });\r\n\r\n    return langData;\r\n}\r\n\r\nfiles.forEach(file => {\r\n    const worksheet = workbook.addWorksheet(file, {views:[{state: 'frozen', xSplit: 1, ySplit: 1}]});\r\n    const langData = {};\r\n\r\n    const columns = [\r\n        { header: 'Key', key: 'key', width: 50 },\r\n    ];\r\n\r\n\r\n    languages.forEach(lang => {\r\n        columns.push({ header: lang, key: lang, width: 65 });\r\n        langData[lang] = require(`./locales/${lang}/${file}`);\r\n    });\r\n    worksheet.columns = columns;\r\n\r\n    const translationData = getTransData(langData);\r\n\r\n    console.log(translationData);\r\n\r\n    function worksheetAddRow(value, key) {\r\n        delete value.nested;\r\n\r\n        Object.entries(value).forEach(([nestedKey, nestedValue]) => {\r\n            const newKey = key ? `${key}${separator}${nestedKey}` : nestedKey;\r\n            if (nestedValue.nested) {\r\n                worksheetAddRow(nestedValue, newKey);\r\n            } else {\r\n                worksheet.addRow({\r\n                    key: newKey,\r\n                    ...nestedValue,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    worksheetAddRow(translationData);\r\n\r\n});\r\n\r\n\r\nworkbook.xlsx.writeFile('./Bar.xlsx')\r\n    .then(workbook => {\r\n        // use workbook\r\n        debugger;\r\n        console.log(workbook);\r\n\r\n    });\r\n\r\n */\r\n"]}