{"version":3,"file":"import.js","sourceRoot":"","sources":["../src/import.ts"],"names":[],"mappings":";;AAEA,qCAA8C;AAE9C,2CAAoE;AAEpE,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,MAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAC;IAEhC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;SAC7B,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;QACzB,MAAM,SAAS,GAAc,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,yBAAa,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QAE9G,SAAS,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE,SAAS;YACrC,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAGH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAkC4B;QAG5B;;;;;YAKI;QAGJ,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAoB,EAAE,EAAE;QAErD,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAC;AACX,CAAC;AA9DD,4BA8DC","sourcesContent":["import * as path from \"path\";\nimport * as fs from \"fs\";\nimport { Workbook, Worksheet } from \"exceljs\";\nimport { assign } from \"./helpers\";\nimport { separator, mainColumns, worksheetName } from \"./constants\";\n\nexport default function (outputPath: string, translationsPath: string): void {\n    const workbook = new Workbook();\n\n    workbook.xlsx.readFile(outputPath)\n        .then((workbook: Workbook) => {\n            const worksheet: Worksheet = workbook.worksheets.find(w => w.name === worksheetName) || workbook.worksheets[0]\n\n            worksheet.eachRow(function(row, rowNumber) {\n                console.log('Row ' + rowNumber + ' = ' + JSON.stringify(row.values));\n            });\n\n\n            /*const translations: any = {};\n            let translationKeys: any[] = [];\n\n            worksheet.columns.forEach((column: any) => {\n                const header = column.values[1];\n\n                if (header === mainColumns.file.header) {\n\n                } else if (header === mainColumns.key.header) {\n                    translationKeys = column.values\n                } else {\n                    translations[header] = translationKeys.reduce((acc, i, idx) => {\n                        if (idx < 2) {\n                            return acc;\n                        }\n\n                        column.values = column.values || {};\n\n                        const value = column.values[idx] || \"\";\n\n                        if (i.includes(separator)) {\n                            const keys = i.split(separator);\n                            assign(acc, keys, value);\n                            return acc;\n                        }\n\n                        return {\n                            ...acc,\n                            [i]: value,\n                        }\n                    }, {})\n                }\n            });\n\n            console.log(translations);*/\n\n\n            /*Object.entries(translations).forEach(([lang, translations]) => {\n                fs.writeFileSync(\n                    path.join(translationsPath, lang, worksheet.name),\n                    JSON.stringify(translations, null, \"\\t\") + \"\\n\"\n                );\n            })*/\n\n\n            workbook.worksheets.forEach((worksheet: Worksheet) => {\n\n            })\n\n        });\n}\n\n"]}