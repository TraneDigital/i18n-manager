{"version":3,"file":"import.js","sourceRoot":"","sources":["../src/import.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA4B;AAC5B,uCAAwB;AACxB,qCAAqD;AACrD,mCAA4B;AAC5B,uCAAwC;AACxC,2CAAmE;AAGnE,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,MAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAA;IAE/B,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;SAC7B,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;QACzB,MAAM,SAAS,GAAc,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,yBAAa,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QAE9G,MAAM,YAAY,GAAiB,EAAE,CAAA;QACrC,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAkB,IAAI,EAAE,CAAA;QAC/D,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAkB,IAAI,EAAE,CAAA;QAErE,0BAA0B;QAC1B,4DAA4D;QAC5D,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAuB,EAAE,EAAE;YAClD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAA;YAClC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAW,CAAC,CAAC,CAAC,EAAE,CAAA;YAEhD,IAAI,MAAM,KAAK,uBAAW,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,uBAAW,CAAC,GAAG,CAAC,MAAM,EAAE;gBACzE,OAAM;aACT;YAED,YAAY,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;gBAC1D,sBAAsB;gBACtB,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAA;oBAE/B,MAAM,IAAI,GAAa;wBACnB,SAAS,CAAC,GAAG,CAAC;wBACd,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,qBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,qBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACxD,CAAA;oBAED,YAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;iBACxB;gBAED,OAAO,GAAG,CAAA;YACd,CAAC,EAAE,EAAE,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE;YACpD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,EAAE;gBACxD,EAAE,CAAC,aAAa,CACZ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,QAAQ,CAAC,EAC3C,sBAAY,CAAC,YAAY,CAAC,CAC7B,CAAA;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;AACV,CAAC;AAjDD,4BAiDC","sourcesContent":["import * as path from \"path\"\r\nimport * as fs from \"fs\"\r\nimport { Workbook, Worksheet, Column } from \"exceljs\"\r\nimport { set } from \"lodash\"\r\nimport { prettifyJson } from \"./helpers\"\r\nimport { separator, mainColumns, worksheetName } from \"./constants\"\r\nimport { Translations } from \"../types\"\r\n\r\nexport default function (outputPath: string, translationsPath: string): void {\r\n    const workbook = new Workbook()\r\n\r\n    workbook.xlsx.readFile(outputPath)\r\n        .then((workbook: Workbook) => {\r\n            const worksheet: Worksheet = workbook.worksheets.find(w => w.name === worksheetName) || workbook.worksheets[0]\r\n\r\n            const translations: Translations = {}\r\n            const filenames = worksheet.columns[0].values as string[] || []\r\n            const translationKeys = worksheet.columns[1].values as string[] || []\r\n\r\n            // iterate through columns\r\n            // todo: probably it could be faster if iterate through rows\r\n            worksheet.columns.forEach((column: Partial<Column>) => {\r\n                const values = column.values || []\r\n                const header = values ? values[1] as string : \"\"\r\n\r\n                if (header === mainColumns.file.header || header === mainColumns.key.header) {\r\n                    return\r\n                }\r\n\r\n                translations[header] = translationKeys.reduce((acc, i, idx) => {\r\n                    // first row is header\r\n                    if (idx > 1) {\r\n                        const value = values[idx] || \"\"\r\n\r\n                        const path: string[] = [\r\n                            filenames[idx],\r\n                            ...(i.includes(separator) ? i.split(separator) : [i])\r\n                        ]\r\n\r\n                        set(acc, path, value)\r\n                    }\r\n\r\n                    return acc\r\n                }, {})\r\n            })\r\n\r\n            Object.entries(translations).forEach(([lang, values]) => {\r\n                Object.entries(values).forEach(([filename, translations]) => {\r\n                    fs.writeFileSync(\r\n                        path.join(translationsPath, lang, filename),\r\n                        prettifyJson(translations),\r\n                    )\r\n                })\r\n            })\r\n\r\n            console.log(\"Completed\")\r\n        })\r\n}\r\n\r\n"]}