{"version":3,"file":"import.js","sourceRoot":"","sources":["../src/import.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,yCAA6B;AAC7B,qCAAyB;AACzB,mCAA8C;AAC9C,qCAAmC;AACnC,yCAAwC;AAExC,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAC;IAEhC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;SAC7B,IAAI,CAAC,UAAC,QAAkB;QACrB,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAoB;YAC7C,IAAM,YAAY,GAAQ,EAAE,CAAC;YAC7B,IAAI,eAAe,GAAU,EAAE,CAAC;YAEhC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAW;gBAClC,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,eAAe,GAAG,MAAM,CAAC,MAAM,CAAA;iBAClC;qBAAM;oBACH,YAAY,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,CAAC,EAAE,GAAG;;wBACtD,IAAI,GAAG,GAAG,CAAC,EAAE;4BACT,OAAO,GAAG,CAAC;yBACd;wBAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;wBAEpC,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;wBAEvC,IAAI,CAAC,CAAC,QAAQ,CAAC,qBAAS,CAAC,EAAE;4BACvB,IAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,qBAAS,CAAC,CAAC;4BAChC,gBAAM,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;4BACzB,OAAO,GAAG,CAAC;yBACd;wBAED,oBACO,GAAG,eACL,CAAC,IAAG,KAAK,OACb;oBACL,CAAC,EAAE,EAAE,CAAC,CAAA;iBACT;YACL,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,EAAoB;oBAAnB,YAAI,EAAE,oBAAY;gBACrD,EAAE,CAAC,aAAa,CACZ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,EACjD,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAClD,CAAC;YACN,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAC;AACX,CAAC;AAhDD,4BAgDC","sourcesContent":["import * as path from \"path\";\nimport * as fs from \"fs\";\nimport { Workbook, Worksheet } from \"exceljs\";\nimport { assign } from \"./helpers\";\nimport { separator } from \"./constants\";\n\nexport default function (outputPath: string, translationsPath: string): void {\n    const workbook = new Workbook();\n\n    workbook.xlsx.readFile(outputPath)\n        .then((workbook: Workbook) => {\n            workbook.worksheets.forEach((worksheet: Worksheet) => {\n                const translations: any = {};\n                let translationKeys: any[] = [];\n\n                worksheet.columns.forEach((column: any) => {\n                    const header = column.values[1];\n\n                    if (header === \"Key\") {\n                        translationKeys = column.values\n                    } else {\n                        translations[header] = translationKeys.reduce((acc, i, idx) => {\n                            if (idx < 2) {\n                                return acc;\n                            }\n\n                            column.values = column.values || {};\n\n                            const value = column.values[idx] || \"\";\n\n                            if (i.includes(separator)) {\n                                const keys = i.split(separator);\n                                assign(acc, keys, value);\n                                return acc;\n                            }\n\n                            return {\n                                ...acc,\n                                [i]: value,\n                            }\n                        }, {})\n                    }\n                });\n\n\n                Object.entries(translations).forEach(([lang, translations]) => {\n                    fs.writeFileSync(\n                        path.join(translationsPath, lang, worksheet.name),\n                        JSON.stringify(translations, null, \"\\t\") + \"\\n\"\n                    );\n                })\n            })\n\n        });\n}\n\n"]}