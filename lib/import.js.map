{"version":3,"file":"import.js","sourceRoot":"","sources":["../src/import.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA6B;AAC7B,uCAAyB;AACzB,qCAA8C;AAC9C,uCAAmC;AACnC,2CAAwC;AAExC,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,MAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAC;IAEhC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;SAC7B,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;QACzB,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAoB,EAAE,EAAE;YACjD,MAAM,YAAY,GAAQ,EAAE,CAAC;YAC7B,IAAI,eAAe,GAAU,EAAE,CAAC;YAEhC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;gBACtC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,eAAe,GAAG,MAAM,CAAC,MAAM,CAAA;iBAClC;qBAAM;oBACH,YAAY,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;wBAC1D,IAAI,GAAG,GAAG,CAAC,EAAE;4BACT,OAAO,GAAG,CAAC;yBACd;wBAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;wBAEpC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;wBAEvC,IAAI,CAAC,CAAC,QAAQ,CAAC,qBAAS,CAAC,EAAE;4BACvB,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,qBAAS,CAAC,CAAC;4BAChC,gBAAM,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;4BACzB,OAAO,GAAG,CAAC;yBACd;wBAED,uCACO,GAAG,KACN,CAAC,CAAC,CAAC,EAAE,KAAK,IACb;oBACL,CAAC,EAAE,EAAE,CAAC,CAAA;iBACT;YACL,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE;gBAC1D,EAAE,CAAC,aAAa,CACZ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,EACjD,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAClD,CAAC;YACN,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAC;AACX,CAAC;AAhDD,4BAgDC","sourcesContent":["import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport { Workbook, Worksheet } from \"exceljs\";\r\nimport { assign } from \"./helpers\";\r\nimport { separator } from \"./constants\";\r\n\r\nexport default function (outputPath: string, translationsPath: string): void {\r\n    const workbook = new Workbook();\r\n\r\n    workbook.xlsx.readFile(outputPath)\r\n        .then((workbook: Workbook) => {\r\n            workbook.worksheets.forEach((worksheet: Worksheet) => {\r\n                const translations: any = {};\r\n                let translationKeys: any[] = [];\r\n\r\n                worksheet.columns.forEach((column: any) => {\r\n                    const header = column.values[1];\r\n\r\n                    if (header === \"Key\") {\r\n                        translationKeys = column.values\r\n                    } else {\r\n                        translations[header] = translationKeys.reduce((acc, i, idx) => {\r\n                            if (idx < 2) {\r\n                                return acc;\r\n                            }\r\n\r\n                            column.values = column.values || {};\r\n\r\n                            const value = column.values[idx] || \"\";\r\n\r\n                            if (i.includes(separator)) {\r\n                                const keys = i.split(separator);\r\n                                assign(acc, keys, value);\r\n                                return acc;\r\n                            }\r\n\r\n                            return {\r\n                                ...acc,\r\n                                [i]: value,\r\n                            }\r\n                        }, {})\r\n                    }\r\n                });\r\n\r\n\r\n                Object.entries(translations).forEach(([lang, translations]) => {\r\n                    fs.writeFileSync(\r\n                        path.join(translationsPath, lang, worksheet.name),\r\n                        JSON.stringify(translations, null, \"\\t\") + \"\\n\"\r\n                    );\r\n                })\r\n            })\r\n\r\n        });\r\n}\r\n\r\n"]}