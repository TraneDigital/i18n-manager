{"version":3,"file":"export.js","sourceRoot":"","sources":["../../src/export.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA6B;AAC7B,uCAAyB;AACzB,qCAA8C;AAC9C,uCAA6C;AAC7C,2CAAwC;AAGxC,SAAS,kBAAkB,CAAC,cAAmB,EAAE,YAAiB,EAAE,IAAY;IAC5E,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE;QACtD,cAAc,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAExD,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACtC,kBAAkB,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;SAC3D;aAAM;YACH,cAAc,CAAC,OAAO,CAAC,mCAChB,cAAc,CAAC,OAAO,CAAC,KAC1B,CAAC,IAAI,CAAC,EAAE,KAAK,GAChB,CAAA;SACJ;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AACD,SAAS,kBAAkB,CAAC,IAAS;IACjC,IAAI,eAAe,GAAG,EAAE,CAAC;IAEzB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE;QAClD,kBAAkB,CAAC,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,OAAO,eAAe,CAAC;AAC3B,CAAC;AACD,SAAS,eAAe,CAAC,KAAU,EAAE,GAAkB,EAAE,SAAoB;IACzE,OAAO,KAAK,CAAC,MAAM,CAAC;IAEpB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,WAAW,CAAgB,EAAE,EAAE;QACtE,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,qBAAS,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAClE,IAAI,WAAW,CAAC,MAAM,EAAE;YACpB,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;SACnD;aAAM;YACH,SAAS,CAAC,MAAM,iBACZ,GAAG,EAAE,MAAM,IACR,WAAW,EAChB,CAAC;SACN;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAGD,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,MAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAA;IAC/B,gDAAgD;IAChD,QAAQ,CAAC,OAAO,GAAG,iBAAiB,CAAA;IACpC,QAAQ,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAA;IAE7B,MAAM,SAAS,GAAa,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAA;IAE5D,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,IAAY,EAAE,EAAE;QAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;QAElD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC1B,OAAO,GAAG,CAAA;SACb;QAED,OAAO;YACH,GAAG,GAAG;YACN,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC;SAC9B,CAAA;IACL,CAAC,EAAE,EAAE,CAAC,CAAA;IACN,MAAM,KAAK,GAAG,0BAAgB,CAAS,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAA;IAGvD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QAC3B,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;QACjG,MAAM,QAAQ,GAAQ,EAAE,CAAC;QAEzB,MAAM,OAAO,GAAG;YACZ,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE;SAC3C,CAAC;QAEF,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACrB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAErD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;YAClD,MAAM,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAA,CAAA,CAAA,CAAC;YAC/G,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;QAE5B,MAAM,eAAe,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAErD,eAAe,CAAC,eAAe,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;SAC9B,IAAI,CAAC,QAAQ,CAAC,EAAE;QACb,eAAe;QACf,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACX,CAAC;AApDD,4BAoDC","sourcesContent":["import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport { Workbook, Worksheet } from \"exceljs\";\r\nimport { removeDuplicates } from \"./helpers\";\r\nimport { separator } from \"./constants\";\r\n\r\n\r\nfunction setTranslationData(translationObj: any, translations: any, lang: string): void {\r\n    Object.entries(translations).forEach(([langKey, trans]) => {\r\n        translationObj[langKey] = translationObj[langKey] || {};\r\n\r\n        if (trans && typeof trans === \"object\") {\r\n            translationObj[langKey].nested = true;\r\n            setTranslationData(translationObj[langKey], trans, lang)\r\n        } else {\r\n            translationObj[langKey] = {\r\n                ...translationObj[langKey],\r\n                [lang]: trans,\r\n            }\r\n        }\r\n    })\r\n}\r\nfunction getTranslationData(data: any): any {\r\n    let translationData = {};\r\n\r\n    Object.entries(data).forEach(([lang, translations]) => {\r\n        setTranslationData(translationData, translations, lang);\r\n    });\r\n\r\n    return translationData;\r\n}\r\nfunction worksheetAddRow(value: any, key: string | null, worksheet: Worksheet) {\r\n    delete value.nested;\r\n\r\n    Object.entries(value).forEach(([nestedKey, nestedValue]: [string, any]) => {\r\n        const newKey = key ? `${key}${separator}${nestedKey}` : nestedKey;\r\n        if (nestedValue.nested) {\r\n            worksheetAddRow(nestedValue, newKey, worksheet);\r\n        } else {\r\n            worksheet.addRow({\r\n                key: newKey,\r\n                ...nestedValue,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default function (outputPath: string, translationsPath: string): void {\r\n    const workbook = new Workbook()\r\n    // todo: get creator from config or package.json\r\n    workbook.creator = 'i18next-manager'\r\n    workbook.created = new Date()\r\n\r\n    const languages: string[] = fs.readdirSync(translationsPath)\r\n\r\n    const allFiles = languages.reduce((acc: string[], lang: string) => {\r\n        const filePath = path.join(translationsPath, lang)\r\n\r\n        if (!fs.existsSync(filePath)) {\r\n            return acc\r\n        }\r\n\r\n        return [\r\n            ...acc,\r\n            ...fs.readdirSync(filePath),\r\n        ]\r\n    }, [])\r\n    const files = removeDuplicates<string>(allFiles).sort()\r\n\r\n\r\n    files.forEach((file: string) => {\r\n        const worksheet = workbook.addWorksheet(file, {views:[{state: 'frozen', xSplit: 1, ySplit: 1}]});\r\n        const langData: any = {};\r\n\r\n        const columns = [\r\n            { header: 'Key', key: 'key', width: 50 },\r\n        ];\r\n\r\n        languages.forEach(lang => {\r\n            columns.push({ header: lang, key: lang, width: 65 });\r\n\r\n            const filePath = path.join(translationsPath, lang)\r\n            const rawJsonData = fs.existsSync(filePath) ? fs.readFileSync(path.join(translationsPath, lang, file), 'utf8');\r\n            langData[lang] = JSON.parse(rawJsonData);\r\n        });\r\n\r\n        worksheet.columns = columns;\r\n\r\n        const translationData = getTranslationData(langData);\r\n\r\n        worksheetAddRow(translationData, null, worksheet);\r\n    });\r\n\r\n\r\n    workbook.xlsx.writeFile(outputPath)\r\n        .then(workbook => {\r\n            // use workbook\r\n            console.log(workbook);\r\n        });\r\n}\r\n"]}