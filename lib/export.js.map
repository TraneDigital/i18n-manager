{"version":3,"file":"export.js","sourceRoot":"","sources":["../src/export.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\"\nimport * as fs from \"fs\"\nimport { Workbook, Worksheet, Cell } from \"exceljs\"\nimport { removeDuplicates } from \"./helpers\"\nimport { separator, mainColumns, worksheetName } from \"./constants\"\n\nconst pkg = require('../package.json')\n\nfunction setTranslationData(translationObj: any, translations: any, lang: string): void {\n    Object.entries(translations).forEach(([langKey, trans]) => {\n        translationObj[langKey] = translationObj[langKey] || {};\n\n        if (trans && typeof trans === \"object\") {\n            translationObj[langKey].nested = true;\n            setTranslationData(translationObj[langKey], trans, lang)\n        } else {\n            translationObj[langKey] = {\n                ...translationObj[langKey],\n                [lang]: trans,\n            }\n        }\n    })\n}\nfunction getTranslationData(data: any): any {\n    let translationData = {};\n\n    Object.entries(data).forEach(([lang, translations]) => {\n        setTranslationData(translationData, translations, lang);\n    });\n\n    return translationData;\n}\nfunction worksheetAddRow(value: any, key: string | null, worksheet: Worksheet, file: string) {\n    delete value.nested;\n\n    Object.entries(value).forEach(([nestedKey, nestedValue]: [string, any]) => {\n        const newKey = key ? `${key}${separator}${nestedKey}` : nestedKey;\n        if (nestedValue.nested) {\n            worksheetAddRow(nestedValue, newKey, worksheet, file);\n        } else {\n            worksheet.addRow({\n                file,\n                key: newKey,\n                ...nestedValue,\n            });\n        }\n    });\n}\nfunction getAllFiles(translationsPath: string, languages: string[]): string[] {\n    const allFiles = languages.reduce((acc: string[], lang: string) => {\n        const filePath = path.join(translationsPath, lang)\n\n        if (!fs.existsSync(filePath)) {\n            return acc\n        }\n\n        return [\n            ...acc,\n            ...fs.readdirSync(filePath),\n        ]\n    }, [])\n\n    return removeDuplicates<string>(allFiles).sort()\n}\nfunction getWorksheetColumns(languages: string[]) {\n    const columns = [\n        { ...mainColumns.file, width: 25 },\n        { ...mainColumns.key, width: 50 },\n    ]\n\n    languages.forEach(lang => {\n        columns.push({ header: lang, key: lang, width: 65 });\n    })\n\n    return columns\n}\n\n\nexport default function (outputPath: string, translationsPath: string): void {\n    const languages: string[] = fs.readdirSync(translationsPath)\n    const files = getAllFiles(translationsPath, languages)\n\n    const workbook = new Workbook()\n    workbook.creator = pkg.name\n    workbook.lastModifiedBy = pkg.name\n    workbook.created = new Date()\n    workbook.modified = new Date()\n\n    const worksheet = workbook.addWorksheet(worksheetName, {\n        views:[{ state: 'frozen', xSplit: 1, ySplit: 1 }],\n    });\n    worksheet.autoFilter = 'A';\n    worksheet.columns = getWorksheetColumns(languages)\n\n    files.forEach((file: string) => {\n        const langData: any = {};\n\n        languages.forEach(lang => {\n            const filePath = path.join(translationsPath, lang, file)\n            const rawJsonData = fs.existsSync(filePath) ? fs.readFileSync(filePath, \"utf8\") : \"{}\";\n            langData[lang] = JSON.parse(rawJsonData);\n        });\n\n        const translationData = getTranslationData(langData);\n        worksheetAddRow(translationData, null, worksheet, file);\n    });\n\n    // Make table header text bold\n    worksheet.getRow(1).eachCell((cell: Cell) => {\n        cell.font = {\n            bold: true,\n        };\n    })\n\n    // Add text wrap to cells\n    languages.forEach((lang: string) => {\n        worksheet.getColumn(lang).eachCell((cell: Cell) => {\n            cell.alignment = {\n                wrapText: true,\n                vertical: \"top\",\n                horizontal: \"left\",\n            }\n        })\n    })\n\n    workbook.xlsx.writeFile(outputPath)\n        .then(() => console.log(\"Completed\"))\n}\n"]}