{"version":3,"file":"export.js","sourceRoot":"","sources":["../src/export.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA4B;AAC5B,uCAAwB;AACxB,qCAAqD;AACrD,mCAA6B;AAC7B,2CAAwF;AACxF,uCAAqC;AAGrC,SAAS,kBAAkB,CAAC,cAA4B,EAAE,YAAwC,EAAE,IAAY;IAC5G,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE;QACtD,cAAc,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;QAEvD,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,4CAA4C;YAC5C,4DAA4D;YAC5D,aAAa;YACb,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,IAAI,CAAA;YACrC,kBAAkB,CAAC,cAAc,CAAC,OAAO,CAAiB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;SAC3E;aAAM;YACH,cAAc,CAAC,OAAO,CAAC,mCAChB,cAAc,CAAC,OAAO,CAAC,KAC1B,CAAC,IAAI,CAAC,EAAE,KAAK,GAChB,CAAA;SACJ;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AACD,SAAS,kBAAkB,CAAC,IAAkB;IAC1C,MAAM,eAAe,GAAiB,EAAE,CAAA;IAExC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE;QAClD,kBAAkB,CAAC,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,CAAA;IAC3D,CAAC,CAAC,CAAA;IAEF,OAAO,eAAe,CAAA;AAC1B,CAAC;AACD,SAAS,eAAe,CAAC,KAAiC,EAAE,GAAkB,EAAE,SAAoB,EAAE,IAAY;IAC9G,OAAO,KAAK,CAAC,MAAM,CAAA;IAEnB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,WAAW,CAAwB,EAAE,EAAE;QAC9E,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,qBAAS,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAA;QACjE,IAAI,WAAW,CAAC,MAAM,EAAE;YACpB,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;SACxD;aAAM;YACH,SAAS,CAAC,MAAM,iBACZ,IAAI,EACJ,GAAG,EAAE,MAAM,IACR,WAAW,EAChB,CAAA;SACL;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AACD,SAAS,WAAW,CAAC,gBAAwB,EAAE,SAAmB;IAC9D,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,IAAY,EAAE,EAAE;QAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;QAElD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC1B,OAAO,GAAG,CAAA;SACb;QAED,OAAO;YACH,GAAG,GAAG;YACN,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC;SAC9B,CAAA;IACL,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,aAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAA;AAChC,CAAC;AACD,SAAS,mBAAmB,CAAC,SAAmB;IAC5C,MAAM,OAAO,GAAG;sDACP,uBAAW,CAAC,IAAI,GAAK,+BAAmB,KAAE,KAAK,EAAE,EAAE;sDACnD,uBAAW,CAAC,GAAG,GAAK,+BAAmB,KAAE,KAAK,EAAE,EAAE;KAC1D,CAAA;IAED,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACrB,OAAO,CAAC,IAAI,+BAAG,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,IAAK,+BAAmB,KAAE,KAAK,EAAE,EAAE,IAAG,CAAA;IAChF,CAAC,CAAC,CAAA;IAEF,OAAO,OAAO,CAAA;AAClB,CAAC;AAGD,mBAAyB,UAAkB,EAAE,gBAAwB;IACjE,MAAM,SAAS,GAAa,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAA;IAC5D,MAAM,KAAK,GAAG,WAAW,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAA;IACtD,MAAM,MAAM,GAAG,mBAAS,EAAE,CAAA;IAE1B,MAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAA;IAC/B,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAA;IACzB,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAA;IAChC,QAAQ,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAA;IAC7B,QAAQ,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAA;IAE9B,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,yBAAa,EAAE;QACnD,KAAK,EAAC,CAAC;gBACH,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,CAAC;gBACT,MAAM,EAAE,CAAC;aACZ,CAAC;KACL,CAAC,CAAA;IACF,SAAS,CAAC,UAAU,GAAG,GAAG,CAAA;IAC1B,SAAS,CAAC,OAAO,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAA;IAElD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QAC3B,MAAM,QAAQ,GAAiB,EAAE,CAAA;QAEjC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YACxD,MAAM,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;YACtF,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,MAAM,eAAe,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QACpD,eAAe,CAAC,eAAe,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;IAC3D,CAAC,CAAC,CAAA;IAEF,yBAAyB;IACzB,SAAS,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QAC/B,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACxC,MAAM,CAAC,SAAS,mCACT,MAAM,CAAC,SAAS,KACnB,QAAQ,EAAE,IAAI,GACjB,CAAA;IACL,CAAC,CAAC,CAAA;IAEF,8BAA8B;IAC9B,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IACnC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAA;IACnB,OAAO,CAAC,IAAI,mCACL,OAAO,CAAC,IAAI,KACf,IAAI,EAAE,IAAI,GACb,CAAA;IACD,OAAO,CAAC,SAAS,mCACV,OAAO,CAAC,SAAS,KACpB,QAAQ,EAAE,KAAK,EACf,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,QAAQ,GACvB,CAAA;IAED,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;SAC9B,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAA;AAC7C,CAAC;AA3DD,4BA2DC","sourcesContent":["import * as path from \"path\"\r\nimport * as fs from \"fs\"\r\nimport { Workbook, Worksheet, Column } from \"exceljs\"\r\nimport { uniq } from \"lodash\"\r\nimport { separator, mainColumns, worksheetName, defaultColumnStyles } from \"./constants\"\r\nimport { getAuthor } from \"./helpers\"\r\nimport { Translations, Translation } from \"../types\"\r\n\r\nfunction setTranslationData(translationObj: Translations, translations: Translations | Translation, lang: string): void {\r\n    Object.entries(translations).forEach(([langKey, trans]) => {\r\n        translationObj[langKey] = translationObj[langKey] || {}\r\n\r\n        if (trans && typeof trans === \"object\") {\r\n            // todo: get rid of nested: boolean property\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n            // @ts-ignore\r\n            translationObj[langKey].nested = true\r\n            setTranslationData(translationObj[langKey] as Translations, trans, lang)\r\n        } else {\r\n            translationObj[langKey] = {\r\n                ...translationObj[langKey],\r\n                [lang]: trans,\r\n            }\r\n        }\r\n    })\r\n}\r\nfunction getTranslationData(data: Translations): Translations {\r\n    const translationData: Translations = {}\r\n\r\n    Object.entries(data).forEach(([lang, translations]) => {\r\n        setTranslationData(translationData, translations, lang)\r\n    })\r\n\r\n    return translationData\r\n}\r\nfunction worksheetAddRow(value: Translations | Translation, key: string | null, worksheet: Worksheet, file: string): void {\r\n    delete value.nested\r\n\r\n    Object.entries(value).forEach(([nestedKey, nestedValue]: [string, Translation]) => {\r\n        const newKey = key ? `${key}${separator}${nestedKey}` : nestedKey\r\n        if (nestedValue.nested) {\r\n            worksheetAddRow(nestedValue, newKey, worksheet, file)\r\n        } else {\r\n            worksheet.addRow({\r\n                file,\r\n                key: newKey,\r\n                ...nestedValue,\r\n            })\r\n        }\r\n    })\r\n}\r\nfunction getAllFiles(translationsPath: string, languages: string[]): string[] {\r\n    const allFiles = languages.reduce((acc: string[], lang: string) => {\r\n        const filePath = path.join(translationsPath, lang)\r\n\r\n        if (!fs.existsSync(filePath)) {\r\n            return acc\r\n        }\r\n\r\n        return [\r\n            ...acc,\r\n            ...fs.readdirSync(filePath),\r\n        ]\r\n    }, [])\r\n\r\n    return uniq(allFiles).sort()\r\n}\r\nfunction getWorksheetColumns(languages: string[]): Partial<Column>[] {\r\n    const columns = [\r\n        { ...mainColumns.file, ...defaultColumnStyles, width: 19 },\r\n        { ...mainColumns.key, ...defaultColumnStyles, width: 50 },\r\n    ]\r\n\r\n    languages.forEach(lang => {\r\n        columns.push({ header: lang, key: lang, ...defaultColumnStyles, width: 65 })\r\n    })\r\n\r\n    return columns\r\n}\r\n\r\n\r\nexport default function (outputPath: string, translationsPath: string): void {\r\n    const languages: string[] = fs.readdirSync(translationsPath)\r\n    const files = getAllFiles(translationsPath, languages)\r\n    const author = getAuthor()\r\n\r\n    const workbook = new Workbook()\r\n    workbook.creator = author\r\n    workbook.lastModifiedBy = author\r\n    workbook.created = new Date()\r\n    workbook.modified = new Date()\r\n\r\n    const worksheet = workbook.addWorksheet(worksheetName, {\r\n        views:[{\r\n            state: 'frozen',\r\n            xSplit: 2,\r\n            ySplit: 1,\r\n        }],\r\n    })\r\n    worksheet.autoFilter = 'A'\r\n    worksheet.columns = getWorksheetColumns(languages)\r\n\r\n    files.forEach((file: string) => {\r\n        const langData: Translations = {}\r\n\r\n        languages.forEach(lang => {\r\n            const filePath = path.join(translationsPath, lang, file)\r\n            const rawJsonData = fs.existsSync(filePath) ? fs.readFileSync(filePath, \"utf8\") : \"{}\"\r\n            langData[lang] = JSON.parse(rawJsonData)\r\n        })\r\n\r\n        const translationData = getTranslationData(langData)\r\n        worksheetAddRow(translationData, null, worksheet, file)\r\n    })\r\n\r\n    // Add text wrap to cells\r\n    languages.forEach((lang: string) => {\r\n        const column = worksheet.getColumn(lang)\r\n        column.alignment = {\r\n            ...column.alignment,\r\n            wrapText: true,\r\n        }\r\n    })\r\n\r\n    // Make table header text bold\r\n    const headRow = worksheet.getRow(1)\r\n    headRow.height = 19\r\n    headRow.font = {\r\n        ...headRow.font,\r\n        bold: true,\r\n    }\r\n    headRow.alignment = {\r\n        ...headRow.alignment,\r\n        wrapText: false,\r\n        vertical: \"middle\",\r\n        horizontal: \"center\",\r\n    }\r\n\r\n    workbook.xlsx.writeFile(outputPath)\r\n        .then(() => console.log(\"Completed\"))\r\n}\r\n"]}